%% Generated by PeakRDL-beam - A free and open-source Erlang module generator
%% https://github.com/joaohf/PeakRDL-beam

-module(rebar3_rdl_example_atxmega_spi).

-include("rebar3_rdl_example_atxmega_spi.hrl").

-export([
    des_atxmega_spi__CTRL_f/1,
    des_atxmega_spi__DATA_fr/1,
    des_atxmega_spi__DATA_fw/1,
    des_atxmega_spi__INTCTRL_f/1,
    des_atxmega_spi__STATUS_f/1,
    ser_atxmega_spi__CTRL_f/6,
    ser_atxmega_spi__DATA_fr/1,
    ser_atxmega_spi__DATA_fw/1,
    ser_atxmega_spi__INTCTRL_f/1,
    ser_atxmega_spi__STATUS_f/2
]).

%% @doc Deserialize 'Control Register' register
%% @end
des_atxmega_spi__CTRL_f(<<?ATXMEGA_SPI__CTRL_f>>) ->
    #atxmega_spi__CTRL{
        prescaler = PRESCALER,
        mode = MODE,
        master = MASTER,
        dord = DORD,
        enable = ENABLE,
        clk2x = CLK2X
    }.

%% @doc Serialize 'Control Register' register
%% @end
ser_atxmega_spi__CTRL_f(PRESCALER, MODE, MASTER, DORD, ENABLE, CLK2X) ->
    <<PRESCALER:2, MODE:2, MASTER:1, DORD:1, ENABLE:1, CLK2X:1>>.

%% @doc Deserialize 'Interrupt Control' register
%% @end
des_atxmega_spi__INTCTRL_f(<<?ATXMEGA_SPI__INTCTRL_f>>) ->
    #atxmega_spi__INTCTRL{
        intlvl = INTLVL
    }.

%% @doc Serialize 'Interrupt Control' register
%% @end
ser_atxmega_spi__INTCTRL_f(INTLVL) ->
    <<INTLVL:2>>.

%% @doc Deserialize 'None' register
%% @end
des_atxmega_spi__STATUS_f(<<?ATXMEGA_SPI__STATUS_f>>) ->
    #atxmega_spi__STATUS{
        wrcol = WRCOL,
        'if' = IF
    }.

%% @doc Serialize 'None' register
%% @end
ser_atxmega_spi__STATUS_f(WRCOL, IF) ->
    <<WRCOL:1, IF:1>>.

%% @doc Deserialize 'None' register
%% The DATA register is used for sending and receiving data.
%% Writing to the register initiates the data transmission, and the byte
%% written to the register will be shifted out on the SPI output line.
%% Reading the register causes the shift register receive buffer to be read,
%% returning the last byte successfully received
%% @end
des_atxmega_spi__DATA_fw(<<?ATXMEGA_SPI__DATA_fw>>) ->
    #atxmega_spi__DATA{
        wdata = WDATA
    }.

%% @doc Serialize 'None' register
%% The DATA register is used for sending and receiving data.
%% Writing to the register initiates the data transmission, and the byte
%% written to the register will be shifted out on the SPI output line.
%% Reading the register causes the shift register receive buffer to be read,
%% returning the last byte successfully received
%% @end
ser_atxmega_spi__DATA_fw(WDATA) ->
    <<WDATA:8>>.

%% @doc Deserialize 'None' register
%% The DATA register is used for sending and receiving data.
%% Writing to the register initiates the data transmission, and the byte
%% written to the register will be shifted out on the SPI output line.
%% Reading the register causes the shift register receive buffer to be read,
%% returning the last byte successfully received
%% @end
des_atxmega_spi__DATA_fr(<<?ATXMEGA_SPI__DATA_fr>>) ->
    #atxmega_spi__DATA{
        rdata = RDATA
    }.

%% @doc Serialize 'None' register
%% The DATA register is used for sending and receiving data.
%% Writing to the register initiates the data transmission, and the byte
%% written to the register will be shifted out on the SPI output line.
%% Reading the register causes the shift register receive buffer to be read,
%% returning the last byte successfully received
%% @end
ser_atxmega_spi__DATA_fr(RDATA) ->
    <<RDATA:8>>.

